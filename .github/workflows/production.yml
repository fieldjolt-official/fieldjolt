name: Deploy to Production

on:
  push:
    branches: [main]

env:
  PLANETSCALE_ORG: ${{ secrets.PLANETSCALE_ORG }}
  PLANETSCALE_DB: ${{ secrets.PLANETSCALE_DB }}
  PLANETSCALE_BRANCH: main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup PlanetScale CLI
        uses: planetscale/setup-pscale-action@v1

      - name: Get default postgres role credentials
        id: db-creds
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
        run: |
          echo "Getting default postgres role..."
          
          # List all roles to find the default one
          ROLES_JSON=$(pscale role list "$PLANETSCALE_DB" "$PLANETSCALE_BRANCH" \
            --org "$PLANETSCALE_ORG" --format json)
          
          echo "Available roles:"
          echo "$ROLES_JSON" | jq '.'
          
          # Get the default postgres role (has full permissions)
          DEFAULT_ROLE=$(echo "$ROLES_JSON" | jq -r '.[] | select(.name == "postgres" or .is_default == true) | .id' | head -n 1)
          
          if [ -n "$DEFAULT_ROLE" ]; then
            echo "Using default role: $DEFAULT_ROLE"
            ROLE_JSON=$(pscale role get "$PLANETSCALE_DB" "$PLANETSCALE_BRANCH" "$DEFAULT_ROLE" \
              --org "$PLANETSCALE_ORG" --format json)
            
            # Parse credentials
            HOST=$(echo "$ROLE_JSON" | jq -r '.access_host_url')
            USERNAME=$(echo "$ROLE_JSON" | jq -r '.username')
            PASSWORD=$(echo "$ROLE_JSON" | jq -r '.password')
            
            DATABASE_URL="postgresql://${USERNAME}:${PASSWORD}@${HOST}:5432/${PLANETSCALE_DB}?sslmode=require"
            
            echo "::add-mask::$PASSWORD"
            echo "::add-mask::$DATABASE_URL"
            echo "database_url=$DATABASE_URL" >> $GITHUB_OUTPUT
          else
            echo "❌ No default role found"
          fi

      - name: Push Prisma schema
        env:
          DATABASE_URL: ${{ steps.db-creds.outputs.database_url }}
        run: |
          cd packages/db
          pnpm prisma generate
          pnpm prisma db push --skip-generate
          echo "✅ Schema updated"

      # Run tests (optional)
      - name: Run tests
        env:
          DATABASE_URL: ${{ steps.db-creds.outputs.database_url }}
        run: pnpm test || echo "⚠️ No tests configured yet"

      # Build the project
      - name: Build
        run: pnpm build

      # # Deploy to Vercel
      # - name: Deploy to Vercel
      #   if: success()
      #   env:
      #     VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      #     DATABASE_URL: ${{ steps.db-creds.outputs.database_url }}
      #   run: |
      #     npm install -g vercel@latest
      #     vercel deploy --prod \
      #       --token=$VERCEL_TOKEN \
      #       --build-env DATABASE_URL="$DATABASE_URL" \
      #       --env DATABASE_URL="$DATABASE_URL" \
      #       --yes

      # # Deploy to Cloudflare
      # - name: Deploy API to Cloudflare
      #   if: success()
      #   env:
      #     CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      #     DATABASE_URL: ${{ steps.db-creds.outputs.database_url }}
      #   run: |
      #     cd apps/api
      #     npx wrangler deploy --env production \
      #       --var DATABASE_URL:"$DATABASE_URL"

      # Cleanup
      - name: Cleanup database role
        if: always()
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
        run: |
          ROLE_ID="${{ steps.db-creds.outputs.role_id }}"
          if [ -n "$ROLE_ID" ]; then
            pscale role delete "$PLANETSCALE_DB" "$PLANETSCALE_BRANCH" "$ROLE_ID" \
              --org "$PLANETSCALE_ORG" --force || true
            echo "✅ Role cleaned up"
          fi