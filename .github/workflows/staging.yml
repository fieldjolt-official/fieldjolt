name: Staging Deployment

on:
  push:
    branches: [staging]

env:
  PSCALE_ORG: ${{ secrets.PSCALE_ORG_NAME }}
  PSCALE_DB: ${{ secrets.PSCALE_DATABASE_NAME }}
  PSCALE_BRANCH: staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Setup PlanetScale CLI
        uses: planetscale/setup-pscale-action@v1

      # Get staging database credentials
      - name: Get staging database password
        id: db-password
        env:
          PSCALE_SERVICE_TOKEN_ID: ${{ secrets.PSCALE_SERVICE_TOKEN_ID }}
          PSCALE_SERVICE_TOKEN: ${{ secrets.PSCALE_SERVICE_TOKEN }}
        run: |
          # Create a password for staging deployment
          PASSWORD_JSON=$(pscale password create "$PSCALE_DB" "$PSCALE_BRANCH" "staging-deploy-${{ github.run_id }}" \
            --org "$PSCALE_ORG" --format json --role admin)
          
          HOST=$(echo "$PASSWORD_JSON" | jq -r '.hostname')
          USERNAME=$(echo "$PASSWORD_JSON" | jq -r '.username')
          PASSWORD=$(echo "$PASSWORD_JSON" | jq -r '.plain_text')
          
          DATABASE_URL="postgresql://${USERNAME}:${PASSWORD}@${HOST}/${PSCALE_DB}?sslmode=require"
          
          echo "::add-mask::$PASSWORD"
          echo "::add-mask::$DATABASE_URL"
          echo "database_url=$DATABASE_URL" >> $GITHUB_OUTPUT

      # Push schema changes
      - name: Push Prisma schema
        env:
          DATABASE_URL: ${{ steps.db-password.outputs.database_url }}
        run: |
          cd packages/db
          pnpm prisma generate
          pnpm prisma db push --skip-generate --accept-data-loss

      # Run tests
      - name: Run tests
        env:
          DATABASE_URL: ${{ steps.db-password.outputs.database_url }}
        run: pnpm test

      # # Deploy to Vercel (staging)
      # - name: Deploy to Vercel
      #   env:
      #     VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      #     DATABASE_URL: ${{ steps.db-password.outputs.database_url }}
      #   run: |
      #     npm install -g vercel@latest
      #     vercel deploy --prod \
      #       --token=$VERCEL_TOKEN \
      #       --build-env DATABASE_URL="$DATABASE_URL" \
      #       --env DATABASE_URL="$DATABASE_URL" \
      #       --yes

      # # Deploy to Cloudflare (staging)
      # - name: Deploy API to Cloudflare
      #   env:
      #     CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      #     DATABASE_URL: ${{ steps.db-password.outputs.database_url }}
      #   run: |
      #     cd apps/api
      #     npx wrangler deploy --env staging \
      #       --var DATABASE_URL:"$DATABASE_URL"